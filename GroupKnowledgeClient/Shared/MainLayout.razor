@inherits LayoutComponentBase

@inject IDialogService dialogService
@inject IGroupState groupState
@inject IWalletState walletState

@implements IDisposable;

<MudThemeProvider Theme="theme" />
<MudDialogProvider NoHeader="true" Position="DialogPosition.TopRight" />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="25">
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
            <MudAvatar Image="icon-512.png" Size="Size.Large"></MudAvatar>
        </MudHidden>
        <MudHidden Breakpoint="Breakpoint.MdAndUp">
            <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        </MudHidden>
        <MudHidden Breakpoint="Breakpoint.Xs">
            <MudText Typo="Typo.h6" Class="ml-4">Group Knowledge Builder</MudText>
        </MudHidden>
        <MudHidden Breakpoint="Breakpoint.Xs" Invert="true">
            <MudText Typo="Typo.subtitle2">Group Knowledge Builder</MudText>
        </MudHidden>
        <MudSpacer />
        <MudButton Variant="Variant.Text" Style="text-transform:none" Color="Color.Inherit" Size="Size.Small" StartIcon="@Icons.Material.Filled.AccountBalanceWallet" @onclick="SetWallet">@walletState.WalletName</MudButton>
    </MudAppBar>
    <MudDrawer @bind-Open="DrawerOpen" Elevation="25" ClipMode="DrawerClipMode.Always">
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
            <MudToolBar DisableGutters="true" Dense="true">
                <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Primary" OnClick="@((e) => DrawerToggle())" Class="ml-3" />
                <MudText Typo="Typo.h5">@SelectedGroup.Name</MudText>
                <MudSpacer />
                @if (SelectedGroup != Group.Empty && IsMember)
                {
                    <MudTooltip Text="Withdraw Tokens" Color="Color.Secondary">
                        <MudIconButton Icon="@Icons.Material.TwoTone.GeneratingTokens" Size="Size.Large" Color="Color.Primary" Link="@($"/withdraw/{@SelectedGroup.Address}")" />
                    </MudTooltip>
                }
                else if (SelectedGroup != Group.Empty)
                {
                    <MudTooltip Text="Join Group" Color="Color.Secondary">
                        <MudIconButton Icon="@Icons.Material.TwoTone.AccountCircle" Size="Size.Large" Color="Color.Primary" Link="@($"/join/{@SelectedGroup.Address}")" />
                    </MudTooltip>
                }
            </MudToolBar>
        </MudHidden>
        <MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {

    public bool DrawerOpen = true;

    private readonly AppTheme theme = new();

    private Group SelectedGroup => groupState.Selected ?? Group.Empty;

    private string GroupName => groupState?.Selected?.Name ?? string.Empty;

    private bool IsMember => SelectedGroup.Balance > 0;

    public void Dispose()
    {
        groupState.Changed -= Refresh;
    }

    protected override void OnInitialized()
    {
        groupState.Changed += Refresh;
    }

    private void DrawerToggle()
    {
        DrawerOpen = !DrawerOpen;
    }

    private void SetWallet()
    {
        var options = new DialogOptions { };
        dialogService.Show<WalletDialog>("Wallet", options);
    }

    private async Task Refresh()
    {
        StateHasChanged();
    }

}