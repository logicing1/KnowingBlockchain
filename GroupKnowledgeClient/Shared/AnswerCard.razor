@inject IGroupState groupState;

<MudCard Elevation="1">
    <MudCardHeader>
        <CardHeaderAvatar>
            <div class="d-flex">
                <MudTooltip Text="Group score. Lower number means few poor rankings and is better." Color="Color.Secondary" Placement="Placement.Right">
                    <MudAvatar Color="@ScoreColor(Answer.GroupScore)" Size="Size.Small">@Answer.GroupScore</MudAvatar>
                </MudTooltip>
                <MudText Typo="Typo.subtitle1" Class="ml-2">Answer @Answer.Index</MudText>
            </div>
        </CardHeaderAvatar>
    </MudCardHeader>
    <MudCardContent>
        <MudText Typo="Typo.body1">@Answer.Content</MudText>
    </MudCardContent>
    <MudCardActions Style="justify-content: center">
        @if (IsMember && !IsBest)
        {
            <MudTooltip Text="@($"Rank 1 best to {TotalAnswers} worst. 0 means indifferent. Ties permitted.")" Color="Color.Secondary">
                <div class="d-flex">
                    <MudSlider Disabled="@Indifferent" T="uint" Step="1" Min="1" Max="@TotalAnswers" @bind-Value="@Answer.MemberRank">
                        <MudText Typo="Typo.h6" Color="Color.Primary" Align="Align.Center">Rank: @Answer.MemberRank.ToString()</MudText>
                    </MudSlider>
                    <MudSwitch @bind-Checked="@Indifferent" Label="Indifferent" Color="Color.Primary" Class="ml-5" @onclick="ToggleRanking"></MudSwitch>
                </div>
            </MudTooltip>
        }
    </MudCardActions>
</MudCard>

@code {
    [Parameter]
    public Answer Answer { get; set; } = Answer.Empty;

    [Parameter]
    public uint TotalAnswers { get; set; } = 0;

    [Parameter]
    public bool IsBest { get; set; } = false;

    private bool Indifferent { get; set; } = false;

    private bool IsMember => groupState?.Selected?.MemberBalance > 0;

    protected override async Task OnParametersSetAsync()
    {
        await Answer.LoadContent();
        if (Answer.MemberRank == 0) Indifferent = true;
    }

    private Color ScoreColor(int score)
    {
        var midZone = (TotalAnswers * (TotalAnswers - 1)) / 6.0;
        if (score < 0 - midZone)
            return Color.Success;
        if (score > midZone)
            return Color.Error;
        return Color.Warning;
    }

    private void ToggleRanking()
    {
        Answer.MemberRank = Indifferent ? TotalAnswers : 0;
    }

}