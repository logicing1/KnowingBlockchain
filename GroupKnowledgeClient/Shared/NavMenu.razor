@using GroupKnowledgeClient.State

@inject IGroupState groupState;
@implements IDisposable;

<MudToolBar Class="justify-center">
    <MudTooltip Text="Connect to info on group." Color="Color.Secondary">
        <MudIconButton Icon="@Icons.Material.TwoTone.GroupAdd" Color="Color.Primary" Link="/connect" />
    </MudTooltip>
    <MudTooltip Text="Remove a group from this list" Color="Color.Secondary">
        <MudIconButton Icon="@Icons.Material.TwoTone.GroupRemove" Color="Color.Primary" Link="/disconnect" />
    </MudTooltip>
</MudToolBar>
<MudDivider Class="mb-3" />
<MudNavMenu>
    @foreach (var group in groups.OrderBy(g => g.Name))
    {
        var link = $"/questions/{group.Address}";
        <MudNavLink Href=@link Match="NavLinkMatch.Prefix" Icon="@Icons.Material.TwoTone.Group">@group.Name</MudNavLink>
    }
</MudNavMenu>

@code {
    private IList<Group> groups;

    public void Dispose()
    {
        groupState.Changed -= Refresh;
    }

    protected override void OnInitialized()
    {
        groupState.Changed += Refresh;
    }

    protected override async Task OnParametersSetAsync()
    {
        await Refresh();
    }

    private async Task Refresh()
    {
        groups = groupState.Connected.Values.ToList();
        foreach (var item in groups)
        {
            await item.LoadName();
        }
        StateHasChanged();
    }
} 