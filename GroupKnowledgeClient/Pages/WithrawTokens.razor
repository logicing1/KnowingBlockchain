@page "/withdraw/{contract}"
@layout MainLayout

@inject NavigationManager navigation;
@inject ISnackbar snackbar;
@inject IDialogService dialogService;
@inject IGroupState groupState;
@inject IAgentState agentState;

<MudContainer Class="d-flex justify-center align-center">
    <MudPaper Elevation="5" Class="pa-5" Style="text-align:center">
        <MudText Typo="Typo.h5" Class="mt-2">Withdraw Tokens:</MudText>
        <MudText Typo="Typo.h6" Class="mt-a">@Group.Name</MudText>
        <MudNumericField Variant="Variant.Outlined" Class="mt-2" T="ulong" Label="Tokens to cash out" Max="@Group.MemberBalance" @bind-Value="TokensOut" />
        <MudFab Icon="@Icons.Material.Filled.GroupRemove" Label="Withdraw" Size="Size.Medium" Class="mt-6 align-self-center" Color="Color.Primary" @onclick="Withdraw" />
    </MudPaper>
</MudContainer>

@code {

    [Parameter]
    public string Contract { get; set; } = string.Empty;

    private Group Group { get; set; } = Group.Empty;

    private ulong TokensOut { get; set; } = 0;

    private ulong? MinTokenRequirement { get; set; } = null;  //Todo: More user friendly way to withdraw without going below minimum & distinguish withdraw from leave

    protected override async Task OnParametersSetAsync()
    {
        var connected = groupState.Connected.TryGetValue(Contract, out var group);
        if (connected && group != null)
        {
            Group = group;
            await Group.LoadMembershipFee();
            TokensOut = group.MemberBalance;
        }
        else
        {
            snackbar.Add("The group is not connected", Severity.Error);
        }
    }

    private async Task Withdraw()
    {
        var dialog = dialogService.Show<PasswordDialog>();
        var result = await dialog.Result;
        var password = result.Data.ToString() ?? string.Empty;
        if (password == string.Empty)
        {
            snackbar.Add("Password not provided", Severity.Warning);
            return;
        }
        agentState.StartTransaction();
        var success = TokensOut == Group.MemberBalance ? await Group.Leave(password) : await Group.Withdraw(TokensOut, password);
        agentState.StopTransaction();
        if (success)
        {
            snackbar.Add("Withdrew Tokens Successfully", Severity.Success);
            navigation.NavigateTo($"/questions/{Group.Address}");
        }
        else
        {
            snackbar.Add("Transaction to withdraw tokens failed", Severity.Error);
        }
    }
}