@page "/rank/{contract}"
@layout MainLayout

@inject NavigationManager navigation;
@inject ISnackbar snackbar;
@inject IDialogService dialogService;
@inject IGroupState groupState;
@inject IAgentState agentState;

<MudToolBar>
    <MudSpacer />
    @if (IsMember)
    {
        <MudTooltip Text="Propose another answer to the question." Color="Color.Secondary">
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.TwoTone.AddComment" Size="Size.Medium" Link="@($"/answer/{@Question.Address}")">New Answer</MudButton>
        </MudTooltip>
        <MudTooltip Text="Submit your ranking of the answers." Color="Color.Secondary">
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.TwoTone.HowToVote" Size="Size.Medium" OnClick="@Vote" Class="ml-5">Vote Ranks</MudButton>
        </MudTooltip>
    }
</MudToolBar>
<MudDivider Class="mb-5" />
<MudGrid>
    <MudItem xs="12">
        <MudExpansionPanel>
            <TitleContent>
                <div class="d-flex">
                    <MudIcon Icon="@Icons.Material.TwoTone.Quiz" Size="Size.Large" Color="Color.Secondary" />
                    <MudText Color="Color.Secondary" Typo="Typo.h6" Class="ml-2">Question @Question.Index</MudText>
                </div>
            </TitleContent>
            <ChildContent>
                <MudText Typo="Typo.body2">@Question.Content</MudText>
            </ChildContent>
        </MudExpansionPanel>
    </MudItem>
    @foreach (var answer in Question.Answers)
    {
        <MudItem xl="4" lg="6" md="12">
            <AnswerCard Answer="@answer" TotalAnswers="@TotalAnswers" />
        </MudItem>
    }
</MudGrid>

@code {

    [Parameter]
    public string Contract { get; set; } = string.Empty;

    private Question Question { get; set; } = Question.Empty;

    private uint TotalAnswers { get; set; } = 0;

    private bool IsMember => groupState?.Selected?.MemberBalance > 0;

    protected override async Task OnParametersSetAsync()
    {
        Question = groupState.SelectedQuestion(Contract);
        await Question.Load();
        TotalAnswers = (uint)Question.Answers.Count();
        if(Question.BestAnswer != null)
            navigation.NavigateTo($"/best/{Question.Address}");
    }

    private async Task Vote()
    {
        var dialog = dialogService.Show<PasswordDialog>();
        var result = await dialog.Result;
        var password = result.Data.ToString() ?? string.Empty;
        if (password == string.Empty)
        {
            snackbar.Add("Password not provided", Severity.Warning);
            return;
        }
        agentState.StartTransaction();
        var success = await Question.Vote(password);
        agentState.StopTransaction();
        if (success)
        {
            snackbar.Add("Transaction to answer question succeeded", Severity.Success);
        }
        else
        {
            snackbar.Add("Transaction to answer question failed", Severity.Error);
        }
        await OnParametersSetAsync();
        await groupState.Update();
    }

}