@page "/ask/{contract}"
@layout MainLayout

@inject NavigationManager navigation;
@inject ISnackbar snackbar;
@inject IDialogService dialogService;
@inject IGroupState groupState;

<MudContainer Class="d-flex justify-center align-center">
    <MudPaper Elevation="5" Class="pa-5 mud-width-full" Style="text-align:center">
        <MudContainer Class="d-flex flex-column justify-center">
            <MudTextField T="string" Label="Question" @bind-Value="QuestionContent" Variant="Variant.Outlined" Lines="50" />
            <MudFab Icon="@Icons.Material.TwoTone.Quiz" Label="Ask Question" Size="Size.Medium" Class="align-self-center mt-6" Color="Color.Primary" @onclick="Ask" />
        </MudContainer>
    </MudPaper>
</MudContainer>

@code {

    [Parameter]
    public string Contract { get; set; } = string.Empty;

    private Group Group { get; set; } = Group.Empty;

    private string QuestionContent { get; set; } = string.Empty;

    protected override void OnParametersSet()
    {
        if (groupState.Connected.TryGetValue(Contract, out var group))
        {
            Group = group;
        }
        else
        {
            snackbar.Add("Group Not Connected", Severity.Error);
        }
    }

    private async Task Ask()
    {
        if (Group == Group.Empty)
            return;
        var password = await GetPassword();
        if (string.IsNullOrWhiteSpace(password))
            return;
        var success = await Group.Ask(QuestionContent, password);
        if (success)
        {
            snackbar.Add("Transaction to ask question succeeded", Severity.Success);
        }
        else
        {
            snackbar.Add("Transaction to ask question failed", Severity.Error);
        }
        navigation.NavigateTo($"questions/{Group.Address}");
    }

    private async Task<string> GetPassword()
    {
        var dialog = dialogService.Show<PasswordDialog>();
        var result = await dialog.Result;
        var password = result.Data.ToString() ?? string.Empty;
        if (password == string.Empty)
            snackbar.Add("Password not provided", Severity.Warning);
        dialog.Close();
        return password;
    }
}
